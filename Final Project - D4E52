{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOsMa9VzzS6tLi4GZBhO0E2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"UZ9jaKr6WtEp","executionInfo":{"status":"ok","timestamp":1689689962543,"user_tz":-420,"elapsed":193297,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"3f174d82-2a9a-4990-882b-b1ce19b29517"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-b4646099-2239-4319-b111-eb5d92454387\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-b4646099-2239-4319-b111-eb5d92454387\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving DataScientist.csv to DataScientist.csv\n"]}],"source":["import pandas as pd\n","\n","from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('DataScientist.csv')"],"metadata":{"id":"xugkUOgRW2B-","executionInfo":{"status":"ok","timestamp":1689689978604,"user_tz":-420,"elapsed":436,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# Convert dữ liệu lỗi (-1, -1.0,etc.) thành NA\n","df.replace(['-1'], [pd.NA], inplace=True)\n","\n","df.replace(['-1.0'], [pd.NA], inplace=True)\n","\n","df['Founded'] = df['Founded'].astype(pd.Int64Dtype()).replace(-1, pd.NA)\n","\n","df['Rating'] = df['Rating'].astype(pd.Float64Dtype()).replace(-1.0, pd.NA)"],"metadata":{"id":"qS9S14PrXIHN","executionInfo":{"status":"ok","timestamp":1689689981436,"user_tz":-420,"elapsed":438,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cXC9WBh7XPnj","executionInfo":{"status":"ok","timestamp":1689689983893,"user_tz":-420,"elapsed":285,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"6b342299-0ef9-4766-fee1-8b07c5162aa6"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Unnamed: 0              0\n","index                   0\n","Job Title               0\n","Salary Estimate         0\n","Job Description         0\n","Rating                409\n","Company Name            0\n","Location                0\n","Headquarters          240\n","Size                  229\n","Founded               977\n","Type of ownership     229\n","Industry              546\n","Sector                546\n","Revenue               229\n","Competitors          2760\n","Easy Apply           3745\n","dtype: int64"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Tranform cột Easy Apply\n","\n","df['Easy Apply'] = df['Easy Apply'].fillna(False).astype(bool)\n","df['Easy Apply'].info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sX7S4gwZXRwy","executionInfo":{"status":"ok","timestamp":1689689987121,"user_tz":-420,"elapsed":255,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"c2ceec29-3f68-4ceb-95e8-dc211288da6f"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.series.Series'>\n","RangeIndex: 3909 entries, 0 to 3908\n","Series name: Easy Apply\n","Non-Null Count  Dtype\n","--------------  -----\n","3909 non-null   bool \n","dtypes: bool(1)\n","memory usage: 3.9 KB\n"]}]},{"cell_type":"code","source":["# Transform cột Salary Estimate thành Average Salary\n","\n","df['Salary Estimate']=df['Salary Estimate'].apply(lambda x:x.replace('$',''))\n","df['Salary Estimate'] = df['Salary Estimate'].apply(lambda x:x.replace('K','000'))\n","\n","#testing\n","df['Salary Estimate'][0].split()\n","df['Salary Estimate'][0].split()[0]\n","df['Salary Estimate'][0].split()[1]\n","\n","def convert_sqft_to_num(x):\n","    tokens = x.split()[0].split('-')\n","    if x.split()[1] == 'Per':\n","        return (float(tokens[0])+float(tokens[1]))*40*52/2\n","    try:\n","        return (float(tokens[0])+float(tokens[1]))/2\n","    except:\n","        return None\n","\n","df['Average Salary'] = df['Salary Estimate'].apply(convert_sqft_to_num)"],"metadata":{"id":"IBjEMYqcXU4A","executionInfo":{"status":"ok","timestamp":1689689989822,"user_tz":-420,"elapsed":293,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"ke2l8e-5XYgZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Transform cột Job Title\n","department = df['Job Title'].str.split(',', expand = True)\n","\n","df['Job Title'], df['Department'] = department[0],department[1]\n","\n","df['Job Title'] = df['Job Title'].str.replace('Sr.', 'Senior')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8XPF0mM4Xe0d","executionInfo":{"status":"ok","timestamp":1689689993473,"user_tz":-420,"elapsed":457,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"af8c4617-2be9-4b37-951f-e4c40f6215bc"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-4d02078b6ce7>:6: FutureWarning: The default value of regex will change from True to False in a future version.\n","  df['Job Title'] = df['Job Title'].str.replace('Sr.', 'Senior')\n"]}]},{"cell_type":"code","source":["df.drop('Department',1, inplace = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7kahjhVkXg-p","executionInfo":{"status":"ok","timestamp":1689690008187,"user_tz":-420,"elapsed":259,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"42825c8a-7c08-4314-c831-d666afac2f3d"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f9ea3e1e9868>:1: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n","  df.drop('Department',1, inplace = True)\n"]}]},{"cell_type":"code","source":["# Transform cột Size\n","\n","df['Size'] = df['Size'].str.replace('employees', '')\n","df['Size'] = df['Size'].str.replace('+', 'plus')\n","df['Size'] = df['Size'].str.replace('10000plus','Above 10000')\n","df['Size'] = df['Size'].str.replace('201 to 500','201 to 1000')\n","df['Size'] = df['Size'].str.replace('501 to 1000 ','201 to 1000')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fcPlgIyzXjyS","executionInfo":{"status":"ok","timestamp":1689690011584,"user_tz":-420,"elapsed":265,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"9f0401c3-f799-4b51-f763-f52f6297504c"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-9-5ea0e9fc372c>:4: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n","  df['Size'] = df['Size'].str.replace('+', 'plus')\n"]}]},{"cell_type":"code","source":["#Transform cột company name:\n","df['Company Name'] = df['Company Name'].str.replace('\\n.*', '')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ruur_MxTXm-i","executionInfo":{"status":"ok","timestamp":1689690053090,"user_tz":-420,"elapsed":269,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"5ae02d77-d420-4745-e9a9-11434eb48fc7"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-10-4c525bfd1865>:2: FutureWarning: The default value of regex will change from True to False in a future version.\n","  df['Company Name'] = df['Company Name'].str.replace('\\n.*', '')\n"]}]},{"cell_type":"code","source":["#Thay thế các giá trị null ở cột Sector, Industry bẳng others:\n","\n","df['Sector'].fillna('Others',inplace=True)\n","df['Industry'].fillna('Others',inplace=True)"],"metadata":{"id":"F4EcLK3gYB-9","executionInfo":{"status":"ok","timestamp":1689690057324,"user_tz":-420,"elapsed":267,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["#Tách city and state từ location\n","Location = df['Location'].str.split(\",\",expand=True,)\n","Location_City = Location[0]\n","Location_State = Location[1]\n","df['Location City'] = Location_City\n","df['Location State'] = Location_State\n","df.drop('Location',axis = 1, inplace = True)"],"metadata":{"id":"S_0zAozTYEcZ","executionInfo":{"status":"ok","timestamp":1689690068431,"user_tz":-420,"elapsed":337,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["#Xóa các cột ko cần thiết (Competitors, Revenue, ...)\n","df.drop('Competitors', axis=1, inplace=True)\n","df.drop('Revenue', axis=1, inplace=True)\n","df.drop('Salary Estimate', axis=1, inplace=True)\n","df.drop('Unnamed: 0', axis=1, inplace=True)\n","df.drop('index', axis=1, inplace=True)"],"metadata":{"id":"0HSz0De2YMa4","executionInfo":{"status":"ok","timestamp":1689690106537,"user_tz":-420,"elapsed":2,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Thêm cột 'Python Requirement'\n","\n","df['Python Requirement'] = 'no'\n","df.loc[df['Job Description'].str.contains('python', case=False), 'Python Requirement'] = 'yes'"],"metadata":{"id":"5d9k95IdYm9P","executionInfo":{"status":"ok","timestamp":1689690215983,"user_tz":-420,"elapsed":301,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Thêm cột 'SQL Requirement'\n","\n","df['SQL Requirement'] = 'no'\n","df.loc[df['Job Description'].str.contains('sql', case=False), 'SQL Requirement'] = 'yes'"],"metadata":{"id":"AwG4nHaPYoxm","executionInfo":{"status":"ok","timestamp":1689690221488,"user_tz":-420,"elapsed":337,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Thêm cột 'Scala Requirement'\n","\n","df['Scala Requirement'] = 'no'\n","df.loc[df['Job Description'].str.contains('Scala', case=False), 'Scala Requirement'] = 'yes'"],"metadata":{"id":"FgPDdxheYtKg","executionInfo":{"status":"ok","timestamp":1689690234283,"user_tz":-420,"elapsed":778,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# Thêm cột 'Java Requirement'\n","\n","df['Java Requirement'] = 'no'\n","df.loc[df['Job Description'].str.contains('Java', case=False), 'Java Requirement'] = 'yes'"],"metadata":{"id":"gOl0VIg9YvQd","executionInfo":{"status":"ok","timestamp":1689690243054,"user_tz":-420,"elapsed":800,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Thêm cột 'C++ Requirement'\n","\n","df['C++ Requirement'] = 'no'\n","df.loc[df['Job Description'].str.contains('C\\+\\+', case=False), 'C++ Requirement'] = 'yes'"],"metadata":{"id":"G5xDgYuYYxjZ","executionInfo":{"status":"ok","timestamp":1689690251737,"user_tz":-420,"elapsed":311,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# Thêm cột 'Job Level'\n","\n","df['Job Level'] = 'Middle'\n","\n","df.loc[df['Job Title'].str.contains('Intern|Trainee|Entry', case=False), 'Job Level'] = 'Entry'\n","\n","df.loc[df['Job Title'].str.contains('Senior', case=False), 'Job Level'] = 'Senior'\n","\n","df.loc[df['Job Title'].str.contains('Junior|Staff|Associate', case=False), 'Job Level'] = 'Junior'\n","\n","df.loc[df['Job Title'].str.contains('Lead|Principal|Chief', case=False), 'Job Level'] = 'Lead'\n","\n","df.loc[df['Job Title'].str.contains('Manager', case=False), 'Job Level'] = 'Manager'\n","\n","df.loc[df['Job Title'].str.contains('Director', case=False), 'Job Level'] = 'Director'"],"metadata":{"id":"Lv9rIAFUY0cq","executionInfo":{"status":"ok","timestamp":1689690273708,"user_tz":-420,"elapsed":279,"user":{"displayName":"lan lê","userId":"04650455424981874200"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["df['Job Level'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"47dT-R9EY-O7","executionInfo":{"status":"ok","timestamp":1689690303729,"user_tz":-420,"elapsed":256,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"59133b4a-ddc9-4aa9-d565-20c935e578ba"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Middle      2736\n","Senior       616\n","Lead         240\n","Junior       144\n","Manager       94\n","Entry         41\n","Director      38\n","Name: Job Level, dtype: int64"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OjSnqbDfZBJX","executionInfo":{"status":"ok","timestamp":1689690316343,"user_tz":-420,"elapsed":431,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"bdf4bd78-c055-44f2-d138-4032bd117ecb"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3909 entries, 0 to 3908\n","Data columns (total 20 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   Job Title           3909 non-null   object \n"," 1   Job Description     3909 non-null   object \n"," 2   Rating              3500 non-null   Float64\n"," 3   Company Name        3909 non-null   object \n"," 4   Headquarters        3669 non-null   object \n"," 5   Size                3680 non-null   object \n"," 6   Founded             2932 non-null   Int64  \n"," 7   Type of ownership   3680 non-null   object \n"," 8   Industry            3909 non-null   object \n"," 9   Sector              3909 non-null   object \n"," 10  Easy Apply          3909 non-null   bool   \n"," 11  Average Salary      3850 non-null   float64\n"," 12  Location City       3909 non-null   object \n"," 13  Location State      3909 non-null   object \n"," 14  Python Requirement  3909 non-null   object \n"," 15  SQL Requirement     3909 non-null   object \n"," 16  Scala Requirement   3909 non-null   object \n"," 17  Java Requirement    3909 non-null   object \n"," 18  C++ Requirement     3909 non-null   object \n"," 19  Job Level           3909 non-null   object \n","dtypes: Float64(1), Int64(1), bool(1), float64(1), object(16)\n","memory usage: 591.8+ KB\n"]}]},{"cell_type":"code","source":["df.to_csv('data_cleaned.csv')\n","files.download('data_cleaned.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"dARSRGMPZGX1","executionInfo":{"status":"ok","timestamp":1689690640024,"user_tz":-420,"elapsed":738,"user":{"displayName":"lan lê","userId":"04650455424981874200"}},"outputId":"e9743294-429d-4477-e1f2-96ade2e46a22"},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_12fe93eb-2c2f-4d4a-9396-cd40d1494fcf\", \"data_cleaned.csv\", 14754929)"]},"metadata":{}}]}]}